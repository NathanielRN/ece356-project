#!rdbsh
"""Search for pattern matches within files

Note: Change shebang to `rdbsh` to use has system utility with shell
"""
from sys import exit
from argparse import ArgumentParser

from client_backend.fs_db_file import File, RegularFile, Directory
from client_backend.fs_db_file import IncorrectFileTypeError, MissingFileError
from client_backend.fs_db_io import FSDatabase

def parse_args():
    global ARGV
    parser = ArgumentParser(description='Find provided pattern in files')
    parser.add_argument('-r', '--recursive', help='recursively search the directory', action='store_true')
    parser.add_argument('paths', help='path(s) that match this file pattern will be searched', nargs="+")
    parser.add_argument('search_pattern', help='the (regexp) pattern to search for in matching files')

    return parser.parse_args(ARGV)

def main(args):
    global FS, SHELL
    paths = args.paths
    files = []
    directories = []
    for idx, search_file in enumerate(paths):
        try:
            files.append(File.resolve_to(FS, search_file, RegularFile))
        except MissingFileError:
            print(f"grep: {search_file}: No such file or directory")
            return 1

        except IncorrectFileTypeError:
            if args.recursive:
                directories.append(File.resolve_to(FS, search_file, Directory))
            else:
                print(f"grep: {search_file}: Is a directory")
                return 1

    if len(files) == 1 and not len(directories): 
        for line_no, line_content in files[0].find_in_file(f".*{args.search_pattern}.*"):
            print(f"Line {line_no}: {line_content}", end="")
        return

    for file_to_search in files:
        for line_no, line_content in file_to_search.find_in_file(f".*{args.search_pattern}.*"):
            print(f"{file_to_search.full_name} - Line {line_no}: {line_content}", end="")

    for directory in directories:
        for file_to_search in directory.get_children_like("%", search_subdirs=True):
            if type(file_to_search) is RegularFile:
                for line_no, line_content in file_to_search.find_in_file(f".*{args.search_pattern}.*"):
                    print(f"{file_to_search.full_name} - Line {line_no}: {line_content}", end="")


if __name__ == "__main__":
    import sys
    from client_backend import shell_context
    FS = FSDatabase('.fs_db_rdbsh')
    ARGV = sys.argv[1:]
    SHELL = shell_context
    exit(main(parse_args()))

if __name__ == "__rdbsh__":
    exit(main(parse_args()))
